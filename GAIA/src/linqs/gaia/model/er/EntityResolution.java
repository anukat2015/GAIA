/*
* This file is part of the GAIA software.
* Copyright 2011 University of Maryland
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
* http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
package linqs.gaia.model.er;

import linqs.gaia.graph.Edge;
import linqs.gaia.graph.Graph;
import linqs.gaia.model.Model;
import linqs.gaia.model.util.plg.PotentialLinkGenerator;

/**
 * Interface for all implementation of entity resolution models.
 * <p>
 * The entity resolution annotations, used in learning and annotated
 * on the predicted graph, has two representations.  The first
 * is to represent the entity resolution using "same-entity" edges
 * where two nodes share such an edge if the nodes belong to the same
 * underlying entity.  The other representation is to have
 * "entity" nodes connecting to nodes which refer to it with "refers-to" edges.
 * All references which have a "refers-to" edge with the same "entity"
 * are co-referent.
 * 
 * @author namatag
 *
 */
public interface EntityResolution extends Model {
	/**
	 * Learn the entity resolution model in a graph where the nodes represent
	 * references and where an edge, of the given schema id, exist between
	 * nodes if they belong to the same entity.
	 * <p>
	 * Note: Assumes all the true er edges are already instantiated
	 * and the ones generated by the generator don't exist.
	 * 
	 * @param graph Graph to apply entity resolution over
	 * @param edgeschemaid Schema ID of edge which exists between nodes
	 * of the same entity
	 * @param refschemaid Schema ID of reference nodes
	 * @param generator {@link PotentialLinkGenerator} class to use to specify
	 * which pairs of nodes are potentialy co-referent.
	 */
	void learn(Graph graph, String edgeschemaid, String refschemaid, PotentialLinkGenerator generator);
	
	/**
	 * Learn over the co-reference edges in the graph.
	 * 
	 * @param graph Graph to predict edge over
	 * @param knownedges Iterable collection of co-reference edges whose existence is known
	 * (either as known existing or known not existing)
	 * @param refschemaid Schema ID of reference nodes
	 * @param edgeschemaid Schema ID of edges to predict existence of
	 * @param existfeature Edge feature which stores the attribute specifying existence
	 */
	void learn(Graph graph, Iterable<Edge> knownedges, String edgeschemaid, String refschemaid, String existfeature);
	
	/**
	 * Learn the entity resolution model in a graph where the nodes represent
	 * references and entities and where an edge, of the given schema id, exist between
	 * a reference node and an entity node if the reference node
	 * refers to that entity.
	 * 
	 * @param graph Graph to apply entity resolution over
	 * @param edgeschemaid Schema ID of edge which exists between nodes
	 * of the same entity
	 * @param entityschemaid Schema ID of entity nodes
	 * @param refschemaid Schema ID of reference nodes
	 * @param referstoschemaid Schema ID of directed "refers-to" edges from
	 * reference node to the entity node it refers to
	 * @param generator {@link PotentialLinkGenerator} class to use to specify
	 * which pairs of nodes are potentialy co-referent.
	 */
	void learn(Graph graph, String edgeschemaid, String entityschemaid, String refschemaid,
			String referstoschemaid, PotentialLinkGenerator generator);
	
	/**
	 * Predict a graph where a "same-entity" edge, of the schema provided,
	 * is created between all nodes which are references to the same entity.
	 * 
	 * @param graph Graph to apply entity resolution over
	 * @param generator {@link PotentialLinkGenerator} class to use to specify
	 * which pairs of nodes are potentialy co-referent.
	 */
	void predictAsLink(Graph graph, PotentialLinkGenerator generator);
	
	/**
	 * Predict a graph where a "same-entity" edge, of the schema provided,
	 * is created between all nodes which are references to the same entity.
	 * 
	 * @param graph Graph to apply entity resolution over
	 * @param generator {@link PotentialLinkGenerator} class to use to specify
	 * which pairs of nodes are potentialy co-referent.
	 * @param removenotexist If true, those predicted not to exist are removed from the resulting graph.
	 * @param existfeature Edge feature which stores the attribute specifying existence
	 */
	void predictAsLink(Graph graph, PotentialLinkGenerator generator, boolean removenotexist, String existfeature);
	
	/**
	 * Predict a graph where a "same-entity" edge, of the schema provided,
	 * is created between all nodes which are references to the same entity.
	 * 
	 * @param graph Graph to apply entity resolution over
	 * @param unknownedges Iterable collection of co-reference edges that potentially exist
	 * @param removenotexist If true, those predicted not to exist are removed from the resulting graph.
	 * @param existfeature Edge feature which stores the attribute specifying existence
	 */
	void predictAsLink(Graph graph, Iterable<Edge> unknownedges, boolean removenotexist, String existfeature);
	
	/**
	 * Predict a graph where entity nodes are added for all references
	 * 
	 * @param graph Graph to apply entity resolution over
	 * @param generator {@link PotentialLinkGenerator} class to use to specify
	 * which pairs of nodes are potentialy co-referent.
	 * @param entitysid Schema ID of entity nodes
	 * @param referstosid Schema ID of directed "refers-to" from references to the entity
	 */
	void predictAsNode(Graph graph, PotentialLinkGenerator generator, String entitysid, String referstosid);
	
	/**
	 * Predict a graph where entity nodes are added for all references
	 * in another graph
	 * 
	 * @param refgraph Graph where reference nodes are defined
	 * @param entitygraph Graph where entity nodes are defined
	 * @param generator {@link PotentialLinkGenerator} class to use to specify
	 * which pairs of nodes are potentialy co-referent.
	 * @param entitysid Schema ID of entity nodes
	 * @param reffeatureid Feature ID to store MultiIDFeature where
	 * the feature stores the IDs of the merged nodes
	 */
	void predictAsNode(Graph refgraph, Graph entitygraph, PotentialLinkGenerator generator, String entitysid, String reffeatureid);
}
