
##############################################################
############## Setup
##############################################################


###############################
# Select the IO format and directory
###############################
inputioclass = io:linqs.gaia.graph.io.TabDelimIO;;
inputdirectory = resource/citeseer;;

###############################
# Identify the references, the edges, and the coreference relation
###############################		
refschemaid = author;;
nodeschemaid = author;;
edgeschemaid = coauthor;;
corefschemaid = coreferent;;


###############################
# Select the PotentialLinkGenerator and set its parameters
# The PotentialLinkGenerator determines which links are possible
###############################
#### Consider all pairs as possible links 
#linkgenerator = lg:linqs.gaia.model.util.plg.AllPairwise;;

#### Group nodes into blocks based on feature blockfid
#### optionally block according to the first prefixlength characters of blockfid
linkgenerator = lg:linqs.gaia.model.util.plg.BlockedPairs;;
lg.blockfid = full_author_name;;
lg.prefixlength = 2;;

#### Sort nodes according to blocks and slide window to generate pairs
#### Sort according to sortfid and slide a window of length windowlength
#linkgenerator = lg:linqs.gaia.model.util.plg.SortedNeighborhood;;
#lg.sortfid = full_author_name;;
#lg.windowlength = 10;;


###############################
# Select the output IO format and directory for the predicted graph
###############################		
predioclass = predio:linqs.gaia.graph.io.TabDelimIO;;
predio.filedirectory = SampleSave;;


###############################
# Select the statistics to compute on predicted graph
###############################
statistics = stat:linqs.gaia.prediction.statistic.SimpleBinaryMeasures,stat:linqs.gaia.prediction.statistic.ConfusionMatrix;;
stat.truerootval = EXIST;;		


###############################
# Indicate whether to compute transitive closure on the predicted graph
###############################
transitiveclosure = yes;;



##############################################################
############## Entity Resolution Methods
##############################################################

###############################
# This block sets up an example entity resolver using thresholded feature-based
# pairwise similarity
# In GAIA, this is done by using the ERLinkPredictor class, which treats ER as
# a link prediction problem, and using ScoreThreshold as the link predictor.
# The node similarity function is NaiveRelationalSim, where we set the weight of the
# relational portion to zero so we only use feature-based similarity.
#
# See the parameters for the feature similarity below
###############################
##### Feature only
entityresolver = er:linqs.gaia.model.er.ERLinkPredictor;;
er.lpclass = lp:linqs.gaia.model.lp.ScoreThreshold;;

# determines how often status output is printed during computation
lp.checkpoint = 5000;;

# similarities greater than this threshold are considered coreferent
lp.threshold = .75;; 

lp.nodesimclass = nodesim:linqs.gaia.similarity.node.NaiveRelationalSim;;

# weight of the relational component
nodesim.alpha = 0.0;; 

# feature(s) used for similarity
nodesim.includefeatures = full_author_name;; 


###############################
# This block sets up an example entity resolver using naive relational similarity
# Like the feature-based similarity setup, ER is cast as a link prediction problem
# but in this case the weight for the relational component of the similarity 
# alpha is nonzero.
#
# See the parameters for both feature similarity and relational similarity below
###############################
##### Naive Relational
#entityresolver = er:linqs.gaia.model.er.ERLinkPredictor;;
#er.lpclass = lp:linqs.gaia.model.lp.ScoreThreshold;;
#lp.checkpoint = 1000;;
#
## similarities greater than this threshold are considered coreferent 
#lp.threshold = .6;;
#
#lp.nodesimclass = nodesim:linqs.gaia.similarity.node.NaiveRelationalSim;;
#
## weight of the relational component
#nodesim.alpha = .25;;
#
## feature(s) used for similarity
#nodesim.includefeatures = full_author_name;;



###############################
# This block sets up an example entity resolver using relational clustering 
# (Bhattacharya & Getoor, 2007). The method depends on a base similarity measure
# for nodes. In this case, we use NaiveRelationalSim. Additionally, two key 
# parameters are classes that determine the method of merging nodes' edges and their
# features when they are considered coreferent.
#
# See the parameters for both feature similarity and relational similarity below
###############################
##### Relational Clustering
#entityresolver = er:linqs.gaia.model.er.RelationalClustering;;
#
## Node similarity class for clustering
#er.nodesimclass = nodesim:linqs.gaia.similarity.node.NaiveRelationalSim;;
#nodesim.alpha = .5;;
#nodesim.includefeatures = full_author_name;;
#
## Class determining edge-merging strategy
#er.iemergerclass = iemerger:linqs.gaia.model.er.merger.node.UnionEdges;;
#
## Class determining node-feature merging strategy
#er.fmergerclass = iemerger:linqs.gaia.model.er.merger.feature.MajorityFeature;;
#
## Features used for node-feature merging
#iemerger.usefeatures = full_author_name;;
#
## Similarity threshold for merging nodes
# er.threshold = 0.6;;
#
## Whether to learn the alpha and threshold parameter
##er.learnalphaandthreshold = yes;;





##############################################################
############## Entity Resolution Methods
##############################################################		


###############################
# This section sets up the relational similarity component of NaiveRelationalSim
###############################		
# Computes the maximum feature-based similarity of connected nodes
relsimclass = relsim:linqs.gaia.similarity.set.PairwiseSimilarity;;
# Which edge type use 
relsim.connectingsid = coauthor;;

# Which features to include for pairwise similarity
relsim.includefeatures = full_author_name;;

# Which feature-based similarity class to use; in this case we use aggregated string similarity
relsim.featuresimclass = relfeaturesim:linqs.gaia.similarity.list.StringListSimilarity;;

# Which string similarity method to use. Many more options are listed below
relfeaturesim.stringsimclass = relstringsim:linqs.gaia.similarity.string.SimMetrics;;
relstringsim.smclass = uk.ac.shef.wit.simmetrics.similaritymetrics.Levenshtein;;
#relstringsim.smclass = uk.ac.shef.wit.simmetrics.similaritymetrics.JaroWinkler;;


###############################
# This section sets up the feature-based component of NaiveRelationalSim
###############################		
# Which feature-based similarity class to use; in this case we use aggregated string similarity
nodesim.featuresimclass = featuresim:linqs.gaia.similarity.list.StringListSimilarity;;

# features to include when computing node similarity
featuresim.includefeatures = full_author_name;;
		
		

###############################
# String similarity
###############################		
## Built into GAIA Soundex similarity
#featuresim.stringsimclass = stringsim:linqs.gaia.similarity.string.SoundexSimilarity;;

## Built into GAIA set similarity on character sets. Need to choose set-similarity parameter
#featuresim.stringsimclass = stringsim:linqs.gaia.similarity.string.CharacterSetSimilarity;;
#stringsim.nssimclass = setsim:linqs.gaia.similarity.set.JaccardCoefficient;;		

## Use 3rd party library SimMetrics, which contains many other string metrics
featuresim.stringsimclass = stringsim:linqs.gaia.similarity.string.SimMetrics;;

# choose a SimMetrics string similarity
stringsim.smclass = uk.ac.shef.wit.simmetrics.similaritymetrics.Levenshtein;;
#stringsim.smclass = uk.ac.shef.wit.simmetrics.similaritymetrics.JaroWinkler;;
#stringsim.smclass = uk.ac.shef.wit.simmetrics.similaritymetrics.Jaro;;
#stringsim.smclass = uk.ac.shef.wit.simmetrics.similaritymetrics.QGramsDistance;;
#stringsim.smclass = uk.ac.shef.wit.simmetrics.similaritymetrics.SmithWaterman;;
#stringsim.smclass = uk.ac.shef.wit.simmetrics.similaritymetrics.MongeElkan;;
#stringsim.smclass = uk.ac.shef.wit.simmetrics.similaritymetrics.JaccardSimilarity;;
		
		
		
