
##############################################################
############## Setup
##############################################################


###############################
# Select the IO format and directory
###############################
inputioclass = io:linqs.gaia.graph.io.TabDelimIO
inputdirectory = resource/citeseer

###############################
# Identify the references, the edges, and the coreference relation
###############################		
refschemaid = author
nodeschemaid = @{refschemaid}
edgeschemaid = coauthor
corefschemaid = coreferent

#removesingletons = yes

localfeature = normalized_author_name

###############################
# Select the PotentialLinkGenerator and set its parameters
# The PotentialLinkGenerator determines which links are possible
###############################
#### Consider all pairs as possible links 
#linkgenerator = lg:linqs.gaia.model.util.plg.AllPairwise

#### Group nodes into blocks based on feature blockfid
#### optionally block according to the first prefixlength characters of blockfid
linkgenerator = lg:linqs.gaia.model.util.plg.BlockedPairs
lg.blockfid = normalized_author_name
lg.prefixlength = 6

#### Sort nodes according to blocks and slide window to generate pairs
#### Sort according to sortfid and slide a window of length windowlength
#linkgenerator = lg:linqs.gaia.model.util.plg.SortedNeighborhood
#lg.sortfid = normalized_author_name
#lg.windowlength = 200

###############################
# Select the output IO format and directory for the predicted graph
###############################		
predioclass = predio:linqs.gaia.graph.io.TabDelimIO
predio.filedirectory = predictions


###############################
# Select the statistics to compute on predicted graph
###############################
statistics = stat:linqs.gaia.prediction.statistic.SimpleBinaryMeasures,stat:linqs.gaia.prediction.statistic.ConfusionMatrix
stat.truerootval = EXIST		


###############################
# Indicate whether to compute transitive closure on the predicted graph
###############################
#transitiveclosure = yes





##############################################################
############## Similarity function settings
##############################################################		

###############################
# String similarity
###############################		

## Use 3rd party library SimMetrics, which contains many other string metrics
stringsimclass = stringsim:linqs.gaia.similarity.string.SimMetrics

# choose a SimMetrics string similarity
stringsim.smclass = uk.ac.shef.wit.simmetrics.similaritymetrics.Levenshtein
#stringsim.smclass = uk.ac.shef.wit.simmetrics.similaritymetrics.JaroWinkler
#stringsim.smclass = uk.ac.shef.wit.simmetrics.similaritymetrics.Jaro
#stringsim.smclass = uk.ac.shef.wit.simmetrics.similaritymetrics.QGramsDistance
#stringsim.smclass = uk.ac.shef.wit.simmetrics.similaritymetrics.SmithWaterman
#stringsim.smclass = uk.ac.shef.wit.simmetrics.similaritymetrics.MongeElkan
#stringsim.smclass = uk.ac.shef.wit.simmetrics.similaritymetrics.JaccardSimilarity



###############################
# This section sets up the relational similarity component of NaiveRelationalSim
###############################		
# Computes the maximum feature-based similarity of connected nodes
relsimclass = relsim:linqs.gaia.similarity.set.PairwiseSimilarity

# Which features to include for pairwise similarity
relsim.includefeatures = @{localfeature}

# Which feature-based similarity class to use; in this case we use aggregated string similarity
relsim.featuresimclass = relfeaturesim:linqs.gaia.similarity.list.StringListSimilarity
relfeaturesim.delimeter = ,

# Which string similarity method to use. Many more options are listed below
relfeaturesim.stringsimclass = @{stringsimclass}


###############################
# This section sets up the feature-based component of NaiveRelationalSim
###############################		
# Which feature-based similarity class to use; in this case we use aggregated string similarity
nodesim.featuresimclass = featuresim:linqs.gaia.similarity.list.StringListSimilarity
featuresim.delimiter = ,
featuresim.stringsimclass = @{stringsimclass}

# features to include when computing node similarity
featuresim.includefeatures = @{localfeature}	
	
	

##############################################################
############## Entity Resolution Methods
##############################################################

localfeature = full_author_name

#loadfile resource/config/NaiveRelational.cfg
loadfile resource/config/RelationalClustering.cfg